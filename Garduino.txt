#include <Wire.h>    // incluye libreria para interfaz I2C
#include <RTClib.h>   // incluye libreria para el manejo del modulo RTC
RTC_DS3231 rtc;     // crea objeto del tipo RTC_DS323
#include <Adafruit_GFX.h>   // libreria para pantallas graficas
#include <Adafruit_SSD1306.h>   // libreria para controlador SSD1306
#define ANCHO 128     // reemplaza ocurrencia de ANCHO por 128
#define ALTO 64       // reemplaza ocurrencia de ALTO por 64
#define OLED_RESET 4      // necesario por la libreria pero no usado
Adafruit_SSD1306 oled(ANCHO, ALTO, &Wire, OLED_RESET);  // crea objeto
//todo lo anterior es para la pantalla y el reloj

//for temperature sensor
#include <Adafruit_Sensor.h>  // libreries for BMP280
#include <Adafruit_BMP280.h>
Adafruit_BMP280 bmp;    // object whit name bmp
float TEMPERATURA;    // variable for temperature
float PRESION;      // variable for presion
//for temperature sensor

//for humidity sensor
const int dry = 416; // value for dry sensor
const int wet = 130; // value for wet sensor
//for humidity sensor

void setup () 
{
 Serial.begin(9600);    // inicializa comunicacion serie a 9600 bps
 if (! rtc.begin()) 
 {       // si falla la inicializacion del modulo
    Serial.println("Modulo RTC no encontrado !");  // muestra mensaje de error
    //while (1);         // bucle infinito que detiene ejecucion del programa
 }
  //rtc.adjust(DateTime(__DATE__, __TIME__)); 
  Wire.begin();         // inicializa bus I2C
  oled.begin(SSD1306_SWITCHCAPVCC, 0x3C); //funcion que permite establecer fecha y horario al momento de la compilacion. Comentar esta linea y volver a subir para normal operacion

Serial.println("Iniciando:");     // texto de inicio
  if ( !bmp.begin() ) {       // si falla la comunicacion con el sensor mostrar
    Serial.println("BMP280 no encontrado !"); // texto y detener flujo del programa
    while (1);          // mediante bucle infinito
  }

}           

void loop () 
{
//datetime start
 DateTime fecha = rtc.now();      

 Serial.print(fecha.day());     
 Serial.print("/");       
 Serial.print(fecha.month());     
 Serial.print("/");       
 Serial.print(fecha.year());      
 Serial.print("/");       
 Serial.print(fecha.hour());      
 Serial.print("/");       
 Serial.print(fecha.minute());
 Serial.print("/");       
 Serial.print(fecha.second());
 Serial.print("/");
//datetime to text

//temperature and presion code
  TEMPERATURA = bmp.readTemperature();
  PRESION = bmp.readPressure()/100;   
  Serial.print(" Temperature: ");
  Serial.print(TEMPERATURA);  
  Serial.print("C ");        
    
  Serial.print("Presion: ");  
  Serial.print(PRESION);      
  Serial.print("hPa");     
//temperature and presion code

//humidity sensor
int sensorVal = analogRead(A0);
  int percentageHumididy = map(sensorVal, wet, dry, 100, 0); 
  Serial.print(" Humidity: ");
  Serial.print(percentageHumididy);
  Serial.println("%");
//humidity sensor


//screen lcd
//settings for screen lcd
  oled.clearDisplay();      
  oled.setTextColor(WHITE);   
  oled.setCursor (10, 30);    
  oled.setTextSize(2);      
//end of screen settings

//datetime to screen
  oled.print(fecha.day());
  oled.print("/");// write text
  oled.print(fecha.month());
  oled.print("/");// write text
  oled.print(fecha.year());
  oled.print("/");// write text
  oled.print(fecha.hour());
  oled.print("/");// write text
  oled.print(fecha.minute());
  oled.print("/");// write text
  oled.print(fecha.second());
//end of datetime to screen

if ((fecha.minute()%2==0)&&(fecha.second()<1)) 
  {
    oled.setCursor (0,0);    // ubica cursor en coordenas 10,30
    oled.setTextSize(1);   
    oled.print("Minuto par");
  }
//show datetime in screen 
oled.display();
//datetime on screen
 delay(1000);         // delay 1 second
}